<application>
  <component name="AppStorage">
    <histories>
      <item value="Illegal callback invocation from native module. This callback type only permits a single invocation from native code." />
      <item value="可回溯" />
      <item value="Para" />
      <item value="Suffix" />
      <item value="记录" />
      <item value="have Para" />
      <item value="参数" />
      <item value="pramas" />
      <item value="Simple" />
      <item value="导航" />
      <item value="width, height, and densityDpi must be greater than 0" />
      <item value="截取屏幕" />
      <item value="Failed to resolve: com.amap.api:navi-3dmap:7.6.0" />
      <item value="Latitude" />
      <item value="Altitude" />
      <item value="加油站" />
      <item value="附近" />
      <item value="到达" />
      <item value="Control whether the timestamp set with {@link #setWhen(long) setWhen} is shown * in the content view." />
      <item value="用时" />
      <item value="耗时" />
      <item value="model" />
      <item value="波点" />
      <item value="the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or * &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;. * (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map * previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;." />
      <item value="天气" />
      <item value="No custom big content view required" />
      <item value="24" />
      <item value="No custom content view required" />
      <item value="An identifier for this notification unique within your * application." />
      <item value="is Terminated" />
      <item value="Subscriber class com.rmondjone.lockscreen.NotificationService and its super classes have no public methods with the @Subscribe annotation" />
      <item value="startForeground from pid=6126, uid=10878 requires android.permission.FOREGROUND_SERVICE" />
      <item value="Sets whether notification posted to this channel should vibrate. The vibration pattern can * be set with {@link #setVibrationPattern(long[])}." />
      <item value="Sets whether notifications posted to this channel should display notification lights, * on devices that support that feature." />
      <item value="Supply custom RemoteViews to use instead of the platform template in the expanded form. * * This will override the expanded layout that would otherwise be constructed by this * Builder object." />
      <item value="Supply custom RemoteViews to use instead of the platform template in the heads up dialog. * * This will override the heads-up layout that would otherwise be constructed by this * Builder object." />
      <item value="The constructed Notification will be posted on this" />
      <item value="通知" />
      <item value="透明" />
      <item value="Window type can not be changed after the window is added." />
      <item value="Window type: dialogs that the keyguard shows * In multiuser systems shows on all users' windows." />
      <item value="Permission android.permission.READ_EXTERNAL_STORAGE denied for package com.oiltreasure" />
      <item value="from" />
      <item value="form" />
      <item value="address" />
      <item value="Translates a string into {@code application/x-www-form-urlencoded} * format using a specific encoding scheme. This method uses the * supplied encoding scheme to obtain the bytes for unsafe * characters." />
      <item value="Can only use lower 16 bits for requestCode" />
      <item value="For example, suppose the natural orientation of the device is * portrait. The device is rotated 270 degrees clockwise, so the device * orientation is 270. Suppose a back-facing camera sensor is mounted in * landscape and the top side of the camera sensor is aligned with the * right edge of the display in natural orientation. So the camera * orientation is 90. The rotation should be set to 0 (270 + 90)." />
      <item value="/** * Sets the clockwise rotation angle in degrees relative to the * orientation of the camera. This affects the pictures returned from * JPEG {@link PictureCallback}. The camera driver may set orientation * in the EXIF header without rotating the picture. Or the driver may * rotate the picture and the EXIF thumbnail. If the Jpeg picture is * rotated, the orientation in the EXIF header will be missing or 1 (row * #0 is top and column #0 is left side). * * &lt;p&gt; * If applications want to rotate the picture to match the orientation * of what users see, apps should use * {@link android.view.OrientationEventListener} and * {@link android.hardware.Camera.CameraInfo}. The value from * OrientationEventListener is relative to the natural orientation of * the device. CameraInfo.orientation is the angle between camera * orientation and natural device orientation. The sum of the two is the * rotation angle for back-facing camera. The difference of the two is * the rotation angle for front-facing camera. Note that the JPEG * pictures of front-facing cameras are not mirrored as in preview * display. * * &lt;p&gt; * For example, suppose the natural orientation of the device is * portrait. The device is rotated 270 degrees clockwise, so the device * orientation is 270. Suppose a back-facing camera sensor is mounted in * landscape and the top side of the camera sensor is aligned with the * right edge of the display in natural orientation. So the camera * orientation is 90. The rotation should be set to 0 (270 + 90). * * &lt;p&gt;The reference code is as follows. * * &lt;pre&gt; * public void onOrientationChanged(int orientation) { * if (orientation == ORIENTATION_UNKNOWN) return; * android.hardware.Camera.CameraInfo info = * new android.hardware.Camera.CameraInfo(); * android.hardware.Camera.getCameraInfo(cameraId, info); * orientation = (orientation + 45) / 90 * 90; * int rotation = 0; * if (info.facing == CameraInfo.CAMERA_FACING_FRONT) { * rotation = (info.orientation - orientation + 360) % 360; * } else { // back-facing camera * rotation = (info.orientation + orientation) % 360; * } * mParameters.setRotation(rotation); * } * &lt;/pre&gt; * * @param rotation The rotation angle in degrees relative to the * orientation of the camera. Rotation can only be 0, * 90, 180 or 270. * @throws IllegalArgumentException if rotation value is invalid. * @see android.view.OrientationEventListener * @see #getCameraInfo(int, CameraInfo) */" />
      <item value="if rotation value is invalid." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="406" />
        <entry key="ENGLISH" value="407" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SPANISH" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>