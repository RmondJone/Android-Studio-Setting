<application>
  <component name="AppStorage">
    <histories>
      <item value="load For Request" />
      <item value="save From Response" />
      <item value="Ensures all cookies currently accessible through the getCookie API are * written to persistent storage. * This call will block the caller until it is done and may perform I/O." />
      <item value="The number of method references in a .dex file cannot exceed 64K." />
      <item value="request" />
      <item value="Expected a string but was BEGIN_ARRAY at line 1 column 2 path $" />
      <item value="Expected a string but was BEGIN_OBJECT at line 1 column 2 path $" />
      <item value="accs bindapp error" />
      <item value="suitcase" />
      <item value="treasure" />
      <item value="* Mock version of the WebView. * Only non override public methods from the real WebView have been added in there. * Methods that take an unknown class as parameter or as return object, have been removed for now. * * TODO: generate automatically." />
      <item value="Calling View methods on another thread than the UI thread." />
      <item value="Indicates that the view does not have a layer." />
      <item value="容器" />
      <item value="NORMAL" />
      <item value="SINGLE COLUMN" />
      <item value="NARROW COLUMNS" />
      <item value="Default cache usage mode. If the navigation type doesn't impose any * specific behavior, use cached resources when they are available * and not expired, otherwise load resources from the network. * Use with {@link #setCacheMode}." />
      <item value="Use cached resources when they are available, even if they have expired." />
      <item value="Don't use the cache, load from the network." />
      <item value="Callback on interrupt." />
      <item value="Callback after navigation." />
      <item value="Callback after lose your way." />
      <item value="Callback when find the destination." />
      <item value="Destroy this React instance and the attached JS context." />
      <item value="we currently don't have an onCreate callback so we call onResume for both transitions" />
      <item value="mDialog must exist when we call updateProperties" />
      <item value="Don't show the dialog if the host is paused" />
      <item value="* Call this from {@link Activity#onPause()}. This notifies any listening modules so they can do * any necessary cleanup. The passed Activity is the current Activity being paused. This will * always be the foreground activity that would be returned by {@link * ReactContext#getCurrentActivity()}." />
      <item value="Unmount the react application at this root view, reclaiming any JS memory associated with that * application. If {@link #startReactApplication} is called, this method must be called before the * ReactRootView is garbage collected (typically in your Activity's onDestroy, or in your * Fragment's onDestroyView)." />
      <item value="current" />
      <item value="现在" />
      <item value="Sends an event to the JS instance that the hardware back has been pressed" />
      <item value="/** * By default, all onBackPress() calls should not execute the default backpress handler and should * instead propagate it to the JS instance. If JS doesn't want to handle the back press itself, it * shall call back into native to invoke this function which should execute the default handler */" />
      <item value="This method will give JS the opportunity to consume the back button event. If JS does not * consume the event, mDefaultBackButtonImpl will be invoked at the end of the round trip to JS." />
      <item value="Invoke without round trip to JS." />
      <item value="Fast Forward media key" />
      <item value="his method will give JS the opportunity to consume the back button event. If JS does not * consume the event, mDefaultBackButtonImpl will be invoked at the end of the round trip to JS." />
      <item value="Force Bundle task to produce sourcemap files if they are not pre-configured by user yet" />
      <item value="compose array with one item - current build flavor name" />
      <item value="if its intermediates/sourcemaps/react then it should be generated/sourcemaps/react" />
      <item value="load Synchronously" />
      <item value="* Returns the name of the main module. Determines the URL used to fetch the JS bundle from the * packager server. It is only used when dev support is enabled. This is the first file to be * executed once the {@link ReactInstanceManager} is created. e.g. &quot;index.android&quot;" />
      <item value="visualized" />
      <item value="A class allows recognizing double key tap of &quot;R&quot;, used to reload JS in {@link * AbstractReactActivity}, {@link RedBoxDialog} and {@link ReactActivity}." />
      <item value="Cannot loadApp while app is already running." />
      <item value="Error while updating property 'display' in shadow node of type: RCTView" />
      <item value="Error while updating prop display" />
      <item value="Expected to run on UI thread!" />
      <item value="小程序" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="291" />
        <entry key="ENGLISH" value="292" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>