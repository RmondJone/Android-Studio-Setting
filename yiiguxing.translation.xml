<application>
  <component name="AppStorage">
    <histories>
      <item value="* Mask for use with setFlags indicating bits used for indicating whether * this view is enabled" />
      <item value="Filter the touch event to apply security policies." />
      <item value="/** * Notifies the verifier that a given event was unhandled and the rest of the * trace for the event should be ignored. * This method should only be called if the event was previously checked by * the consistency verifier using {@link #onInputEvent} and other methods. * @param event The event. * @param nestingLevel The nesting level: 0 if called from the base class, * or 1 from a subclass. If the event was already checked by this consistency verifier * at a higher nesting level, it will not be checked again. Used to handle the situation * where a subclass dispatching method delegates to its superclass's dispatching method * and both dispatching methods call into the consistency verifier. */" />
      <item value="Called when activity resume is complete (after {@link #onResume} has * been called). Applications will generally not implement this method; * it is intended for system classes to do final setup after application * resume code has run. * * &lt;p&gt;&lt;em&gt;Derived classes must call through to the super class's * implementation of this method. If they do not, an exception will be * thrown.&lt;/em&gt;&lt;/p&gt;" />
      <item value="Push resumeArgs into the activity for consideration" />
      <item value="handle Resume Activity" />
      <item value="Perform calling of an activity's {@link Activity#onCreate} * method. The default implementation simply calls through to that method." />
      <item value="If there was an error, for any reason, tell the activity manager to stop us" />
      <item value="restore action in case it was changed" />
      <item value="(left mouse button)." />
      <item value="First touch target in the linked list of touch targets." />
      <item value="@return Return true to steal motion events from the children and have * them dispatched to this ViewGroup through onTouchEvent(). * The current target will receive an ACTION_CANCEL event, and no further * messages will be delivered here" />
      <item value="* Call this when you want to know the new location. If it returns true, * the animation is not yet finished." />
      <item value="The amount of friction applied to scrolls and flings." />
      <item value="How proxies are generated." />
      <item value="Generate the proxy directly instead of calling // through to ProxyGenerator." />
      <item value="SecurityManager / permission checks." />
      <item value="* A factory function that generates, defines and returns the proxy class given * the ClassLoader and array of interfaces." />
      <item value="Choose a name for the proxy class to generate." />
      <item value="* Remove methods that have the same name, parameters and return type. This * computes the exceptions of each method; this is the intersection of the * exceptions of equivalent methods." />
      <item value="/** * Remove methods that have the same name, parameters and return type. This * computes the exceptions of each method; this is the intersection of the * exceptions of equivalent methods. * * @param methods the methods to find exceptions for, ordered by name and * signature. */" />
      <item value="BEGIN Android-changed: Excluded AccessController.doPrivileged call." />
      <item value="Look up or generate the designated proxy class." />
      <item value="Called after security checks have been made." />
      <item value="Retrieves and removes the head (first element) of this list." />
      <item value="Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument." />
      <item value="Hardware Renderer" />
      <item value="Runs the callback with a new scope which gets dropped at the end" />
      <item value="秒" />
      <item value="纯净" />
      <item value="on Received Error" />
      <item value="/** * Called when host activity receives destroy event (e.g. {@link Activity#onDestroy}. Only called * for the last React activity to be destroyed. */" />
      <item value="/** * Tells JavaScript to open windows automatically. This applies to the * JavaScript function {@code window.open()}. The default is {@code false}. * * @param flag {@code true} if JavaScript can open windows automatically */" />
      <item value="A functional interface (callback) that returns true or false for the given input path should be compressed." />
      <item value="to keep alpha channel, the compress speed will be slow." />
      <item value="View manager for AndroidViews (plain React Views)." />
      <item value="Retrieve the current decor view, but only if it has already been created; * otherwise returns null." />
      <item value="Creates a new bitmap, scaled from an existing bitmap, when possible. If the * specified width and height are the same as the current width and height of * the source bitmap, the source bitmap is returned and no new bitmap is * created." />
      <item value="Compressed data, so row and pixel strides are 0. To uncompress, use" />
      <item value="The maximum number of images the user will want to * access simultaneously. This should be as small as possible to * limit memory use. Once maxImages Images are obtained by the * user, one of them has to be released before a new Image will * become available for access through * {@link #acquireLatestImage()} or {@link #acquireNextImage()}. * Must be greater than 0." />
      <item value="acquire Latest Image" />
      <item value="Illegal callback invocation from native module. This callback type only permits a single invocation from native code." />
      <item value="可回溯" />
      <item value="Para" />
      <item value="Suffix" />
      <item value="记录" />
      <item value="have Para" />
      <item value="参数" />
      <item value="pramas" />
      <item value="Simple" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="451" />
        <entry key="ENGLISH" value="452" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SPANISH" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>